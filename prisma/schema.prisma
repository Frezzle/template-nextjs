generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO is cuid secure? uuid better? uuid compatible with next-auth adapter?

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Profile {
  id     String  @id @default(cuid())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId String  @unique
}

// Removed this User model because next-auth's prisma adapter defines its own User model.
// Apparently you can only change the fields if you define your own adapter,
// which is not worth it right now.
// Probably, I'll just create separate models/tables for associating things with users,
// even if it's a one-to-one relationship; less efficient but less hassle right now.
// https://authjs.dev/reference/adapters
// https://authjs.dev/reference/adapter/prisma
// model User {
//   id      Int      @id @default(cuid())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
}

// next-auth model, don't change
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// next-auth model, don't change
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// next-auth model, don't change
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Profile       Profile?
}

// next-auth model, don't change
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
